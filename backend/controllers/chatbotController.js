const Chatbot = require('../models/Chatbot');
const EquipmentRequest = require('../models/EquipmentRequest');
const FaultReport = require('../models/FaultReport');
const Materiel = require('../models/Materiel');

// Get or create chatbot session
exports.getSession = async (req, res) => {
  try {
    let session = await Chatbot.findOne({ 
      user: req.user.id, 
      isActive: true 
    });

    if (!session) {
      session = await Chatbot.create({
        user: req.user.id,
        sessionId: `session_${req.user.id}_${Date.now()}`,
        context: {
          userRole: req.user.role,
          currentTask: null,
          lastAction: null
        }
      });
    }

    res.json({
      success: true,
      data: {
        sessionId: session.sessionId,
        messages: session.messages,
        context: session.context
      }
    });
  } catch (error) {
    console.error('Get chatbot session error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Error getting chatbot session' 
    });
  }
};

// Send message to chatbot
exports.sendMessage = async (req, res) => {
  try {
    const { message, sessionId } = req.body;
    
    let session = await Chatbot.findOne({ 
      user: req.user.id, 
      sessionId: sessionId 
    });

    if (!session) {
      return res.status(404).json({ 
        success: false, 
        message: 'Session not found' 
      });
    }

    // Add user message
    session.messages.push({
      role: 'user',
      content: message,
      timestamp: new Date()
    });

    // Generate bot response based on user role and message content
    const botResponse = await generateBotResponse(message, req.user.role, session.context);
    
    // Add bot response
    session.messages.push({
      role: 'assistant',
      content: botResponse.content,
      timestamp: new Date(),
      context: botResponse.context
    });

    // Update context
    if (botResponse.context) {
      session.context = { ...session.context, ...botResponse.context };
    }
    
    session.lastActivity = new Date();
    await session.save();

    res.json({
      success: true,
      data: {
        response: botResponse.content,
        context: session.context
      }
    });
  } catch (error) {
    console.error('Send message error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Error processing message' 
    });
  }
};

// Generate bot response based on message and user role
async function generateBotResponse(message, userRole, context) {
  console.log('Chatbot: Processing message:', message, 'for role:', userRole);
  const lowerMessage = message.toLowerCase();
  
  // Enhanced keyword detection with more comprehensive patterns
  const keywords = {
    equipment: ['demande', '√©quipement', 'request', 'besoin', 'mat√©riel', 'ordinateur', 'cam√©ra', 'microphone', '√©cran', 'clavier', 'souris', 'c√¢ble', 'obtenir', 'avoir', 'utiliser', 'pr√™ter', 'emprunter', 'allouer'],
    fault: ['panne', 'probl√®me', 'fault', 'erreur', 'bug', 'dysfonctionnement', 'ne marche pas', 'cass√©', 'd√©faillant', 'signalement', 'rapport', 'd√©faillance', 'incident', 'dysfonctionne'],
    maintenance: ['maintenance', 'r√©paration', 'r√©parer', 'intervention', 'technicien', 'corriger', 'fix', 'r√©parer', 'r√©viser', 'v√©rifier', 'contr√¥ler', 'entretien'],
    statistics: ['statistique', 'rapport', 'gestion', 'donn√©es', 'analyse', 'graphique', 'chiffre', 'nombre', 'total', 'pourcentage', 'm√©trique', 'performance', 'indicateur'],
    user: ['utilisateur', 'user', 'compte', 'profil', 'connexion', 'mot de passe', 'authentification', 'login', 'se connecter'],
    schedule: ['planning', 'calendrier', 'horaire', 'rendez-vous', 'intervention', 'planifier', 'programmer', 'agenda', 'planification'],
    help: ['aide', 'help', 'comment', 'guide', 'tutoriel', 'assistance', 'support', 'que puis-je', 'que peux-je', 'comment faire', 'guide moi'],
    status: ['statut', '√©tat', 'situation', 'o√π en est', 'avancement', 'progression', 'suivi', 'suivre', 'v√©rifier'],
    create: ['cr√©er', 'ajouter', 'nouveau', 'nouvelle', 'ajout', 'ins√©rer', 'enregistrer', 'g√©n√©rer', 'faire'],
    view: ['voir', 'afficher', 'consulter', 'lister', 'montrer', 'regarder', 'visualiser', 'd√©couvrir', 'trouver'],
    update: ['modifier', 'changer', 'mettre √† jour', '√©diter', 'corriger', 'actualiser', 'r√©viser', 'am√©liorer'],
    delete: ['supprimer', 'effacer', 'enlever', 'retirer', 'd√©truire', 'annuler', 'retirer'],
    search: ['chercher', 'rechercher', 'trouver', 'localiser', 'identifier', 'd√©couvrir'],
    export: ['exporter', 't√©l√©charger', 'sauvegarder', 'imprimer', 'pdf', 'excel', 'fichier'],
    import: ['importer', 'charger', 'uploader', 't√©l√©verser', 'ajouter en masse']
  };

  // Context-aware responses based on previous conversation
  if (context && context.currentTask) {
    const contextualResponse = handleContextualResponse(message, userRole, context, lowerMessage);
    if (contextualResponse) {
      return contextualResponse;
    }
    // If no contextual response, continue with normal flow
  }

  // Check for equipment-related requests
  if (keywords.equipment.some(keyword => lowerMessage.includes(keyword))) {
    return handleEquipmentRequest(message, userRole, context);
  }

  // Check for fault reporting
  if (keywords.fault.some(keyword => lowerMessage.includes(keyword))) {
    return handleFaultReport(message, userRole, context);
  }

  // Check for maintenance requests
  if (keywords.maintenance.some(keyword => lowerMessage.includes(keyword))) {
    return handleMaintenanceRequest(message, userRole, context);
  }

  // Check for statistics/management requests
  if (keywords.statistics.some(keyword => lowerMessage.includes(keyword))) {
    return handleStatisticsRequest(message, userRole, context);
  }

  // Check for user management requests
  if (keywords.user.some(keyword => lowerMessage.includes(keyword))) {
    return handleUserManagementRequest(message, userRole, context);
  }

  // Check for scheduling requests
  if (keywords.schedule.some(keyword => lowerMessage.includes(keyword))) {
    return handleSchedulingRequest(message, userRole, context);
  }

  // Check for help requests
  if (keywords.help.some(keyword => lowerMessage.includes(keyword))) {
    return handleHelpRequest(message, userRole, context);
  }

  // Check for status inquiries
  if (keywords.status.some(keyword => lowerMessage.includes(keyword))) {
    return handleStatusRequest(message, userRole, context);
  }

  // Check for creation requests
  if (keywords.create.some(keyword => lowerMessage.includes(keyword))) {
    return handleCreationRequest(message, userRole, context);
  }

  // Check for viewing requests
  if (keywords.view.some(keyword => lowerMessage.includes(keyword))) {
    return handleViewRequest(message, userRole, context);
  }

  // Check for update requests
  if (keywords.update.some(keyword => lowerMessage.includes(keyword))) {
    return handleUpdateRequest(message, userRole, context);
  }

  // Check for deletion requests
  if (keywords.delete.some(keyword => lowerMessage.includes(keyword))) {
    return handleDeleteRequest(message, userRole, context);
  }

  // Check for search requests
  if (keywords.search.some(keyword => lowerMessage.includes(keyword))) {
    return handleSearchRequest(message, userRole, context);
  }

  // Check for export requests
  if (keywords.export.some(keyword => lowerMessage.includes(keyword))) {
    return handleExportRequest(message, userRole, context);
  }

  // Check for import requests
  if (keywords.import.some(keyword => lowerMessage.includes(keyword))) {
    return handleImportRequest(message, userRole, context);
  }

  // Greeting detection
  if (lowerMessage.includes('bonjour') || lowerMessage.includes('salut') || lowerMessage.includes('hello') || lowerMessage.includes('hi') || lowerMessage.includes('bonsoir') || lowerMessage.includes('bonne journ√©e') || lowerMessage.includes('bonsoir') || lowerMessage.includes('coucou') || lowerMessage.includes('hey')) {
    return handleGreeting(message, userRole, context);
  }

  // Thank you detection
  if (lowerMessage.includes('merci') || lowerMessage.includes('thanks') || lowerMessage.includes('thank you') || lowerMessage.includes('parfait') || lowerMessage.includes('super') || lowerMessage.includes('g√©nial')) {
    return {
      content: "De rien ! Je suis l√† pour vous aider. N'h√©sitez pas si vous avez d'autres questions ou si vous avez besoin d'assistance pour autre chose. üòä",
      context: { currentTask: 'thanks' }
    };
  }

  // Goodbye detection
  if (lowerMessage.includes('au revoir') || lowerMessage.includes('bye') || lowerMessage.includes('goodbye') || lowerMessage.includes('√† bient√¥t') || lowerMessage.includes('√† plus') || lowerMessage.includes('ciao')) {
    return {
      content: "Au revoir ! N'h√©sitez pas √† revenir si vous avez besoin d'aide. Bonne journ√©e ! üëã",
      context: { currentTask: 'goodbye' }
    };
  }

  // Question detection
  if (lowerMessage.includes('?') || lowerMessage.includes('quoi') || lowerMessage.includes('comment') || lowerMessage.includes('pourquoi') || lowerMessage.includes('quand') || lowerMessage.includes('o√π') || lowerMessage.includes('qui') || lowerMessage.includes('combien')) {
    return handleQuestion(message, userRole, context);
  }

  // Default intelligent response
  return generateIntelligentResponse(message, userRole, context);
}

// Handle contextual responses based on previous conversation
function handleContextualResponse(message, userRole, context, lowerMessage) {
  const currentTask = context.currentTask;
  
  switch (currentTask) {
    case 'equipment_request':
      if (lowerMessage.includes('oui') || lowerMessage.includes('ok') || lowerMessage.includes('d\'accord') || lowerMessage.includes('commencer')) {
        return {
          content: "Parfait ! Commen√ßons par cr√©er votre demande d'√©quipement :\n\n1. **Allez dans le menu** ‚Üí 'Mes Demandes' (ou '√âquipements')\n2. **Cliquez sur** 'Nouvelle Demande' ou 'Ajouter'\n3. **Remplissez le formulaire** :\n   - Type d'√©quipement (ordinateur, cam√©ra, etc.)\n   - Description de votre besoin\n   - Date n√©cessaire\n   - Priorit√©\n\n**Types d'√©quipement disponibles :**\n- Ordinateurs, Cam√©ras, Microphones, √âcrans, Claviers, Souris, C√¢bles\n\nAvez-vous des questions sur le processus ?",
          context: { currentTask: 'equipment_request_guidance' }
        };
      }
      break;
      
    case 'fault_report':
      if (lowerMessage.includes('oui') || lowerMessage.includes('ok') || lowerMessage.includes('d\'accord') || lowerMessage.includes('commencer')) {
        return {
          content: "Excellent ! Cr√©ons votre rapport de panne :\n\n1. **Allez dans le menu** ‚Üí 'Rapports de Panne'\n2. **Cliquez sur** 'Nouveau Rapport'\n3. **Remplissez le formulaire** :\n   - S√©lectionnez l'√©quipement concern√©\n   - Type de panne (mat√©riel, logiciel, r√©seau, etc.)\n   - Description d√©taill√©e du probl√®me\n   - Gravit√© (Faible, Moyenne, √âlev√©e, Critique)\n   - Impact sur votre travail\n\n**Conseils pour une description efficace :**\n- Quand le probl√®me a commenc√©\n- √âtapes pour reproduire le probl√®me\n- Messages d'erreur si applicable\n- Solution de contournement si disponible\n\nD√©crivez-moi le probl√®me que vous rencontrez !",
          context: { currentTask: 'fault_report_guidance' }
        };
      }
      break;
      
    case 'maintenance':
      if (lowerMessage.includes('intervention') || lowerMessage.includes('planifi√©e') || lowerMessage.includes('t√¢che')) {
        return {
          content: "Pour voir vos interventions planifi√©es :\n\n1. **Allez dans** 'Maintenance en cours' ou 'Planning'\n2. **Consultez la liste** de vos t√¢ches assign√©es\n3. **Pour chaque intervention** :\n   - V√©rifiez les d√©tails (√©quipement, priorit√©, √©ch√©ance)\n   - Cliquez sur 'Confirmer r√©ception' si c'est une nouvelle t√¢che\n   - Mettez √† jour le statut au fur et √† mesure\n\n**Statuts possibles :**\n- En attente ‚Üí Confirmer r√©ception\n- En cours ‚Üí Traitement en cours\n- Termin√©e ‚Üí Rapport √† remplir\n\nAvez-vous des questions sur une intervention sp√©cifique ?",
          context: { currentTask: 'maintenance_guidance' }
        };
      }
      break;
  }
  
  // If no specific contextual response, continue with normal flow
  return null;
}

// Handle search requests
function handleSearchRequest(message, userRole, context) {
  return {
    content: "Je peux vous aider √† rechercher des informations dans le syst√®me :\n\nüîç **√âl√©ments recherchables :**\n- **√âquipements** - Par nom, type, num√©ro de s√©rie, localisation\n- **Utilisateurs** - Par nom, email, r√¥le (admin seulement)\n- **Demandes** - Par statut, type d'√©quipement, demandeur\n- **Rapports de panne** - Par √©quipement, gravit√©, statut\n- **Maintenances** - Par technicien, √©quipement, statut\n\n**Comment rechercher :**\n1. Allez dans la section correspondante\n2. Utilisez la barre de recherche en haut\n3. Appliquez des filtres pour affiner\n4. Triez les r√©sultats selon vos besoins\n\nQue souhaitez-vous rechercher exactement ?",
    context: { currentTask: 'search' }
  };
}

// Handle export requests
function handleExportRequest(message, userRole, context) {
  const responses = {
    admin: {
      content: "En tant qu'administrateur, vous pouvez exporter :\n\nüìä **Rapports et statistiques :**\n- Allez dans 'Statistiques' ‚Üí Bouton 'Exporter PDF'\n- Choisissez le format (PDF ou Excel)\n- S√©lectionnez les donn√©es √† inclure\n\nüìã **Listes d√©taill√©es :**\n- Liste des utilisateurs\n- Inventaire des √©quipements\n- Historique des maintenances\n- Rapports d'allocations\n\nüíæ **Formats disponibles :**\n- PDF pour les rapports formels\n- Excel pour l'analyse de donn√©es\n- CSV pour l'import dans d'autres syst√®mes\n\nQue souhaitez-vous exporter ?",
      context: { currentTask: 'export' }
    },
    technical_manager: {
      content: "En tant que responsable technique, vous pouvez exporter :\n\nüìä **Statistiques d'√©quipement :**\n- Performance des √©quipements\n- Co√ªts de maintenance\n- Taux d'utilisation\n\nüìã **Rapports de maintenance :**\n- Interventions par technicien\n- Temps d'intervention\n- Pi√®ces utilis√©es\n\nüìà **Planification :**\n- Calendrier des interventions\n- Charge de travail des techniciens\n- √âquipements n√©cessitant une attention\n\nAllez dans 'Statistiques' pour acc√©der aux options d'export.",
      context: { currentTask: 'export' }
    },
    default: {
      content: "Vous pouvez exporter :\n\n1. **Vos demandes** - Historique de vos demandes d'√©quipement\n2. **Vos rapports** - Historique de vos rapports de panne\n3. **Vos allocations** - Liste de vos √©quipements assign√©s\n\n**Comment faire :**\n- Allez dans la section correspondante\n- Cherchez le bouton 'Exporter' ou 'T√©l√©charger'\n- Choisissez le format (PDF, Excel, CSV)\n\nQue souhaitez-vous exporter ?"
    }
  };

  return responses[userRole] || responses.default;
}

// Handle import requests
function handleImportRequest(message, userRole, context) {
  const responses = {
    admin: {
      content: "En tant qu'administrateur, vous pouvez importer :\n\nüë• **Utilisateurs en masse :**\n- Fichier CSV avec nom, email, r√¥le\n- Import automatique avec mots de passe temporaires\n\nüîß **√âquipements en masse :**\n- Fichier Excel avec d√©tails des √©quipements\n- Import avec validation automatique\n\nüìä **Donn√©es historiques :**\n- Import de donn√©es depuis d'autres syst√®mes\n- Migration de donn√©es existantes\n\n‚ö†Ô∏è **Pr√©cautions :**\n- V√©rifiez le format du fichier\n- Sauvegardez avant l'import\n- Testez avec un petit √©chantillon d'abord\n\nContactez le support technique pour l'assistance √† l'import.",
      context: { currentTask: 'import' }
    },
    default: {
      content: "L'import de donn√©es en masse est g√©n√©ralement r√©serv√© aux administrateurs pour des raisons de s√©curit√©.\n\n**Si vous avez besoin d'importer des donn√©es :**\n1. Contactez votre administrateur syst√®me\n2. Pr√©parez vos donn√©es dans un format CSV ou Excel\n3. V√©rifiez que les donn√©es sont correctement format√©es\n\n**Pour des ajouts individuels :**\n- Utilisez les formulaires de cr√©ation dans l'interface\n- C'est plus s√ªr et permet la validation en temps r√©el\n\nAvez-vous des questions sur le format des donn√©es ?"
    }
  };

  return responses[userRole] || responses.default;
}

// Handle equipment requests
function handleEquipmentRequest(message, userRole, context) {
  const responses = {
    default: {
      content: "Je peux vous aider avec les demandes d'√©quipement. Voici ce que vous pouvez faire :\n\n1. **Faire une nouvelle demande** - Sp√©cifiez le type d'√©quipement dont vous avez besoin\n2. **V√©rifier le statut** de vos demandes existantes\n3. **Consulter la liste** des √©quipements disponibles\n\nD√©crivez-moi plus pr√©cis√©ment ce dont vous avez besoin !"
    }
  };

  return responses[userRole] || responses.default;
}

// Handle fault reports
function handleFaultReport(message, userRole, context) {
  return {
    content: "Je vois que vous rencontrez un probl√®me technique. Je peux vous aider √† le signaler efficacement :\n\nüö® **Pour signaler une panne :**\n1. Allez dans 'Rapports de Panne' dans le menu\n2. Cliquez sur 'Nouveau Rapport'\n3. S√©lectionnez l'√©quipement concern√©\n4. D√©crivez le probl√®me en d√©tail\n5. Indiquez la gravit√© (Faible, Moyenne, √âlev√©e, Critique)\n\nüìù **Informations utiles √† inclure :**\n- Description pr√©cise du probl√®me\n- Quand le probl√®me a commenc√©\n- √âtapes pour reproduire le probl√®me\n- Solution de contournement si disponible\n\nD√©crivez-moi le probl√®me que vous rencontrez !",
    context: { currentTask: 'fault_report' }
  };
}

// Handle maintenance requests
function handleMaintenanceRequest(message, userRole, context) {
  const responses = {
    technicien: {
      content: "En tant que technicien, je peux vous aider avec la maintenance :\n\nüîß **Interventions en cours :**\n- Consultez 'Maintenance en cours' pour voir vos t√¢ches\n- Cliquez sur 'Confirmer r√©ception' pour les nouvelles interventions\n\nüìã **Ajouter un rapport :**\n- Allez dans 'R√©parations' pour documenter vos interventions\n- Incluez les pi√®ces utilis√©es, le temps pass√©, et la solution appliqu√©e\n\nüìä **Suivi des interventions :**\n- Consultez l'historique dans 'Rapports'\n- V√©rifiez les statistiques de performance\n\nQue souhaitez-vous faire ?",
      context: { currentTask: 'maintenance' }
    },
    technical_manager: {
      content: "En tant que responsable technique, je peux vous aider avec la gestion de la maintenance :\n\nüìÖ **Planifier des interventions :**\n- Allez dans 'Planification Services'\n- Assignez des techniciens aux interventions\n- D√©finissez les priorit√©s et √©ch√©ances\n\nüìä **Suivi des performances :**\n- Consultez les statistiques de maintenance\n- Analysez les temps d'intervention\n- Identifiez les √©quipements n√©cessitant plus d'attention\n\nüîß **Gestion des √©quipements :**\n- Mettez √† jour le statut des √©quipements\n- Planifiez la maintenance pr√©ventive\n\nComment puis-je vous aider ?",
      context: { currentTask: 'maintenance_management' }
    },
    default: {
      content: "Je peux vous aider avec les questions de maintenance. Voici ce que vous pouvez faire :\n\n1. **Signaler un probl√®me** n√©cessitant une intervention\n2. **V√©rifier le statut** d'une intervention en cours\n3. **Consulter l'historique** des maintenances\n\nD√©crivez-moi votre besoin sp√©cifique !"
    }
  };

  return responses[userRole] || responses.default;
}

// Handle statistics requests
function handleStatisticsRequest(message, userRole, context) {
  const responses = {
    admin: {
      content: "En tant qu'administrateur, vous avez acc√®s √† toutes les statistiques :\n\nüìä **Tableau de bord principal :**\n- Vue d'ensemble des utilisateurs, √©quipements et maintenances\n- Graphiques en temps r√©el\n- Alertes et notifications\n\nüìà **Rapports d√©taill√©s :**\n- Statistiques des utilisateurs\n- Performance des √©quipements\n- Analyse des co√ªts de maintenance\n- Export PDF/Excel disponible\n\nüë• **Gestion des utilisateurs :**\n- Statistiques d'utilisation par r√¥le\n- Activit√© des utilisateurs\n- Gestion des permissions\n\nQue souhaitez-vous analyser ?",
      context: { currentTask: 'statistics' }
    },
    technical_manager: {
      content: "En tant que responsable technique, voici les statistiques disponibles :\n\nüìä **Statistiques d'√©quipement :**\n- R√©partition par type et statut\n- Taux d'utilisation\n- Co√ªts de maintenance\n\nüìà **Performance de maintenance :**\n- Temps moyen d'intervention\n- Taux de r√©solution\n- √âquipements les plus probl√©matiques\n\nüë• **Allocations et utilisation :**\n- Suivi des allocations par utilisateur\n- Taux d'occupation des √©quipements\n- Historique des demandes\n\nüîß **Planification :**\n- Interventions planifi√©es vs r√©alis√©es\n- Charge de travail des techniciens\n\nQuelle statistique vous int√©resse ?",
      context: { currentTask: 'statistics' }
    },
    default: {
      content: "Je peux vous aider √† consulter les statistiques disponibles selon votre r√¥le :\n\nüìä **Statistiques g√©n√©rales :**\n- √âquipements disponibles\n- Vos demandes et allocations\n- Historique des maintenances\n\nüìà **Rapports personnalis√©s :**\n- Vos statistiques d'utilisation\n- Performance de vos √©quipements\n\nQue souhaitez-vous consulter ?"
    }
  };

  return responses[userRole] || responses.default;
}

// Handle user management requests
function handleUserManagementRequest(message, userRole, context) {
  const responses = {
    admin: {
      content: "En tant qu'administrateur, je peux vous aider avec la gestion des utilisateurs :\n\nüë• **Gestion des comptes :**\n- Cr√©er de nouveaux utilisateurs\n- Modifier les informations utilisateur\n- Supprimer des comptes\n- G√©rer les r√¥les et permissions\n\nüîê **S√©curit√© :**\n- R√©initialiser les mots de passe\n- G√©rer les sessions actives\n- Surveiller l'activit√© des utilisateurs\n\nüìä **Statistiques utilisateurs :**\n- Nombre d'utilisateurs par r√¥le\n- Activit√© et connexions\n- Utilisation des fonctionnalit√©s\n\nQue souhaitez-vous faire ?",
      context: { currentTask: 'user_management' }
    },
    default: {
      content: "Pour la gestion des utilisateurs, vous pouvez :\n\n1. **Modifier votre profil** - Mettre √† jour vos informations personnelles\n2. **Changer votre mot de passe** - S√©curiser votre compte\n3. **Consulter vos statistiques** - Voir votre activit√©\n\nContactez un administrateur pour d'autres modifications."
    }
  };

  return responses[userRole] || responses.default;
}

// Handle scheduling requests
function handleSchedulingRequest(message, userRole, context) {
  const responses = {
    technical_manager: {
      content: "En tant que responsable technique, je peux vous aider avec la planification :\n\nüìÖ **Planification des services :**\n- Allez dans 'Planification Services'\n- S√©lectionnez l'√©quipement et le technicien\n- D√©finissez la date et la priorit√©\n- Ajoutez une description d√©taill√©e\n\nüë• **Gestion des techniciens :**\n- Consultez la disponibilit√© des techniciens\n- R√©partissez la charge de travail\n- Suivez les performances\n\n‚è∞ **Optimisation :**\n- Planifiez la maintenance pr√©ventive\n- √âvitez les conflits d'horaires\n- Priorisez les interventions urgentes\n\nQue souhaitez-vous planifier ?",
      context: { currentTask: 'scheduling' }
    },
    technicien: {
      content: "En tant que technicien, voici votre planning :\n\nüìÖ **Vos interventions :**\n- Consultez 'Planning' pour voir vos t√¢ches\n- V√©rifiez les priorit√©s et √©ch√©ances\n- Mettez √† jour le statut des interventions\n\n‚è∞ **Gestion du temps :**\n- Estimez la dur√©e des interventions\n- Signalez les retards √©ventuels\n- Documentez le temps r√©el pass√©\n\nüìã **Rapports :**\n- Remplissez les rapports d'intervention\n- Incluez les pi√®ces utilis√©es\n- Notez les observations importantes\n\nComment puis-je vous aider ?",
      context: { currentTask: 'technician_schedule' }
    },
    default: {
      content: "Pour la planification, vous pouvez :\n\n1. **Consulter votre planning** - Voir vos rendez-vous et t√¢ches\n2. **Demander une intervention** - Planifier une maintenance\n3. **V√©rifier les disponibilit√©s** - Trouver un cr√©neau libre\n\nQue souhaitez-vous planifier ?"
    }
  };

  return responses[userRole] || responses.default;
}

// Handle help requests
function handleHelpRequest(message, userRole, context) {
  const roleHelp = getRoleSpecificHelp(userRole);
  return {
    content: `ü§ñ **Assistant IA - Aide personnalis√©e**\n\n${roleHelp}\n\n**Fonctionnalit√©s disponibles :**\n\nüîß **√âquipements :**\n- Faire des demandes d'√©quipement\n- Consulter la liste des √©quipements\n- V√©rifier le statut des allocations\n\nüö® **Maintenance :**\n- Signaler des pannes\n- Suivre les interventions\n- Consulter l'historique\n\nüìä **Statistiques :**\n- Voir les rapports et analyses\n- Exporter les donn√©es\n- Consulter les m√©triques\n\nüí° **Conseils :**\n- Posez-moi des questions sp√©cifiques\n- D√©crivez votre probl√®me en d√©tail\n- Je peux vous guider √©tape par √©tape\n\n**Comment puis-je vous aider aujourd'hui ?**`,
    context: { currentTask: 'help' }
  };
}

// Handle status requests
function handleStatusRequest(message, userRole, context) {
  return {
    content: "Je peux vous aider √† v√©rifier le statut de diff√©rents √©l√©ments :\n\nüìã **Statuts disponibles :**\n- **Demandes d'√©quipement** : En attente, Approuv√©e, Rejet√©e, Remplie\n- **Rapports de panne** : Signal√©, Reconnu, En cours, R√©solu\n- **Maintenances** : En attente, En cours, Termin√©e, Annul√©e\n- **√âquipements** : Disponible, Affect√©, Maintenance, Hors service\n\nüîç **Pour v√©rifier un statut :**\n1. Allez dans la section correspondante\n2. Consultez la liste ou le tableau de bord\n3. Utilisez les filtres pour affiner la recherche\n\nQue souhaitez-vous v√©rifier exactement ?",
    context: { currentTask: 'status_check' }
  };
}

// Handle creation requests
function handleCreationRequest(message, userRole, context) {
  const responses = {
    admin: {
      content: "En tant qu'administrateur, vous pouvez cr√©er :\n\nüë• **Utilisateurs :**\n- Allez dans 'Utilisateurs' ‚Üí 'Ajouter un utilisateur'\n- Remplissez les informations (nom, email, r√¥le)\n- D√©finissez un mot de passe temporaire\n\nüîß **√âquipements :**\n- Allez dans 'Mat√©riels' ‚Üí 'Ajouter un mat√©riel'\n- Sp√©cifiez le type, nom, num√©ro de s√©rie\n- D√©finissez la localisation et l'√©tat\n\nüìã **Rapports :**\n- G√©n√©rez des rapports personnalis√©s\n- Exportez les donn√©es en PDF/Excel\n\nQue souhaitez-vous cr√©er ?",
      context: { currentTask: 'creation' }
    },
    default: {
      content: "Vous pouvez cr√©er :\n\n1. **Demandes d'√©quipement** - Si vous avez besoin de mat√©riel\n2. **Rapports de panne** - Pour signaler des probl√®mes\n3. **Rapports de maintenance** - Si vous √™tes technicien\n\nQue souhaitez-vous cr√©er ?"
    }
  };

  return responses[userRole] || responses.default;
}

// Handle view requests
function handleViewRequest(message, userRole, context) {
  return {
    content: "Je peux vous aider √† consulter diff√©rentes informations :\n\nüëÄ **√âl√©ments consultables :**\n- **Liste des √©quipements** - Voir tous les mat√©riels disponibles\n- **Vos demandes** - Consulter l'historique de vos demandes\n- **Rapports de panne** - Voir les probl√®mes signal√©s\n- **Maintenances** - Consulter les interventions\n- **Statistiques** - Analyser les donn√©es et rapports\n\nüîç **Navigation :**\n- Utilisez le menu de gauche pour naviguer\n- Chaque section affiche les informations pertinentes\n- Utilisez les filtres et la recherche pour affiner\n\nQue souhaitez-vous consulter ?",
    context: { currentTask: 'viewing' }
  };
}

// Handle update requests
function handleUpdateRequest(message, userRole, context) {
  const responses = {
    admin: {
      content: "En tant qu'administrateur, vous pouvez modifier :\n\nüë• **Utilisateurs :**\n- Allez dans 'Utilisateurs' ‚Üí Cliquez sur l'utilisateur\n- Modifiez les informations ou le r√¥le\n- Sauvegardez les changements\n\nüîß **√âquipements :**\n- Allez dans 'Mat√©riels' ‚Üí Cliquez sur l'√©quipement\n- Modifiez les informations (statut, localisation, etc.)\n- Mettez √† jour les d√©tails de maintenance\n\nüìä **Syst√®me :**\n- Mettez √† jour les param√®tres syst√®me\n- Modifiez les configurations\n\nQue souhaitez-vous modifier ?",
      context: { currentTask: 'updating' }
    },
    default: {
      content: "Vous pouvez modifier :\n\n1. **Votre profil** - Informations personnelles et mot de passe\n2. **Vos demandes** - Si elles sont encore en attente\n3. **Vos rapports** - Si vous √™tes l'auteur\n\nQue souhaitez-vous modifier ?"
    }
  };

  return responses[userRole] || responses.default;
}

// Handle delete requests
function handleDeleteRequest(message, userRole, context) {
  const responses = {
    admin: {
      content: "‚ö†Ô∏è **Attention : Suppression d'√©l√©ments**\n\nEn tant qu'administrateur, vous pouvez supprimer :\n\nüë• **Utilisateurs :**\n- Allez dans 'Utilisateurs' ‚Üí Cliquez sur l'utilisateur\n- Cliquez sur 'Supprimer' (action irr√©versible)\n\nüîß **√âquipements :**\n- Allez dans 'Mat√©riels' ‚Üí Cliquez sur l'√©quipement\n- Cliquez sur 'Supprimer' (v√©rifiez d'abord les allocations)\n\n‚ö†Ô∏è **Pr√©cautions :**\n- V√©rifiez qu'il n'y a pas d'allocations actives\n- Assurez-vous que la suppression est n√©cessaire\n- Cette action est irr√©versible\n\n√ätes-vous s√ªr de vouloir supprimer quelque chose ?",
      context: { currentTask: 'deletion' }
    },
    default: {
      content: "Pour supprimer des √©l√©ments :\n\n1. **Vos demandes** - Si elles sont encore en attente\n2. **Vos rapports** - Si vous √™tes l'auteur et qu'ils ne sont pas trait√©s\n\n‚ö†Ô∏è **Note :** Contactez un administrateur pour d'autres suppressions.\n\nQue souhaitez-vous supprimer ?"
    }
  };

  return responses[userRole] || responses.default;
}

// Handle greetings
function handleGreeting(message, userRole, context) {
  const greetings = {
    admin: "Bonjour ! Je suis votre assistant IA pour l'administration. Je peux vous aider avec la gestion des utilisateurs, des √©quipements, les statistiques et bien plus encore. Comment puis-je vous assister aujourd'hui ?",
    technicien: "Salut ! Je suis votre assistant pour la maintenance. Je peux vous aider avec vos interventions, rapports de maintenance, planning et gestion des √©quipements. Que puis-je faire pour vous ?",
    technical_manager: "Bonjour ! Je suis votre assistant pour la gestion technique. Je peux vous aider avec la planification des services, les statistiques, la gestion des √©quipements et le suivi des allocations. Comment puis-je vous aider ?",
    default: "Bonjour ! Je suis votre assistant IA. Je peux vous aider avec vos demandes d'√©quipement, rapports de panne, maintenance et bien plus encore. Comment puis-je vous assister ?"
  };

  return {
    content: greetings[userRole] || greetings.default,
    context: { currentTask: 'greeting' }
  };
}

// Handle questions
function handleQuestion(message, userRole, context) {
  return {
    content: "Excellente question ! Je peux vous aider √† trouver la r√©ponse. Pour vous donner une r√©ponse pr√©cise, pourriez-vous me donner plus de d√©tails ?\n\nüí° **Conseils pour une meilleure aide :**\n- D√©crivez votre situation sp√©cifique\n- Mentionnez le type d'√©quipement ou de probl√®me\n- Indiquez ce que vous avez d√©j√† essay√©\n\n**Exemples de questions pr√©cises :**\n- 'Comment faire une demande de cam√©ra pour un projet vid√©o ?'\n- 'O√π puis-je voir le statut de ma demande d'√©quipement ?'\n- 'Comment signaler une panne d'ordinateur ?'\n\nPouvez-vous reformuler votre question avec plus de d√©tails ?",
    context: { currentTask: 'question' }
  };
}

// Generate intelligent response for unrecognized messages
function generateIntelligentResponse(message, userRole, context) {
  const suggestions = {
    admin: [
      "G√©rer les utilisateurs et leurs permissions",
      "Consulter les statistiques du syst√®me",
      "Cr√©er ou modifier des √©quipements",
      "Exporter des rapports d√©taill√©s"
    ],
    technicien: [
      "Voir mes interventions planifi√©es",
      "Ajouter un rapport de maintenance",
      "Consulter l'inventaire technique",
      "G√©rer mon planning d'interventions"
    ],
    technical_manager: [
      "Planifier des services de maintenance",
      "Consulter les statistiques d'√©quipement",
      "G√©rer les allocations d'√©quipement",
      "Suivre les performances des techniciens"
    ],
    default: [
      "Faire une demande d'√©quipement",
      "Signaler un probl√®me technique",
      "Consulter mes allocations",
      "Voir l'historique de mes demandes"
    ]
  };

  const roleSuggestions = suggestions[userRole] || suggestions.default;
  
  return {
    content: `Je ne suis pas s√ªr de comprendre exactement ce que vous cherchez, mais je peux vous aider avec plusieurs t√¢ches selon votre r√¥le :\n\n**Suggestions pour vous :**\n${roleSuggestions.map(suggestion => `‚Ä¢ ${suggestion}`).join('\n')}\n\n**Pour une aide plus pr√©cise :**\n- D√©crivez votre besoin en d√©tail\n- Mentionnez le type d'√©quipement ou de probl√®me\n- Indiquez ce que vous souhaitez accomplir\n\n**Exemples :**\n- "Je veux demander une cam√©ra pour un projet"\n- "Mon ordinateur ne fonctionne plus"\n- "Comment voir mes demandes en attente ?"\n\nQue souhaitez-vous faire exactement ?`,
    context: { currentTask: 'general_assistance' }
  };
}

// Get role-specific help
function getRoleSpecificHelp(userRole) {
  switch (userRole) {
    case 'technicien':
      return "En tant que technicien, vous pouvez g√©rer les interventions, ajouter des rapports de maintenance, et traiter les demandes.";
    case 'technical_manager':
      return "En tant que responsable technique, vous pouvez g√©rer les √©quipements, consulter les statistiques, et planifier les interventions.";
    case 'admin':
      return "En tant qu'administrateur, vous avez acc√®s √† toutes les fonctionnalit√©s du syst√®me.";
    default:
      return "Vous pouvez utiliser le syst√®me pour vos besoins d'√©quipement.";
  }
}

// Get chatbot statistics
exports.getChatbotStats = async (req, res) => {
  try {
    const totalSessions = await Chatbot.countDocuments();
    const activeSessions = await Chatbot.countDocuments({ isActive: true });
    
    const roleStats = await Chatbot.aggregate([
      {
        $lookup: {
          from: 'users',
          localField: 'user',
          foreignField: '_id',
          as: 'userInfo'
        }
      },
      {
        $unwind: '$userInfo'
      },
      {
        $group: {
          _id: '$userInfo.role',
          count: { $sum: 1 }
        }
      }
    ]);

    res.json({
      success: true,
      data: {
        totalSessions,
        activeSessions,
        roleStats
      }
    });
  } catch (error) {
    console.error('Get chatbot stats error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Error fetching chatbot statistics' 
    });
  }
};
